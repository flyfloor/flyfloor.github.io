<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React on braavos</title>
    <link>https://flyfloor.github.io/tags/react/</link>
    <description>Recent content in React on braavos</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 05 Jul 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://flyfloor.github.io/tags/react/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How about a nice cup of React</title>
      <link>https://flyfloor.github.io/posts/2016-07-05-how-about-a-nice-cup-of-react/</link>
      <pubDate>Tue, 05 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://flyfloor.github.io/posts/2016-07-05-how-about-a-nice-cup-of-react/</guid>
      <description>接触 React 一年左右，期间在单页面、单页应用都有使用， 它极大地改变了我个人的前端开发方式。为方便快速出产品，闲暇之余也尝试写了点基础组件: react-component, react-image-cropper，react-touch-gallery, react-file-upload。也一直计划着写点心得总结什么的，迫于忙、浮躁，难静下心写东西，屡次作罢。这两天刚离职，决定把这篇总结补上。
在 React 之前，玩过一点点 Angular 跟 Backbone，Backbone 是比较轻量级 MVC，Angular 较重，它的指令、注入式写法, 较死板的规则，不够简洁的 API，诸多概念等等，最终只是被我当玩具折腾了下。由于接触到项目多数时间花在 view 的交互、事件、变化更新上，所以大多数情况还是选择熟悉的 jQuery，原因无非是：熟练，可控，最轻依赖，快速灵活。过程基本上是: 命名 DOM，给 DOM 加特效，取数据更新 DOM， 绑定事件到 DOM 等等。时间一久，问题就很明显了：即使多次尝试做不同层次的抽象分层，还是很乱，太频繁与 DOM 打交道，遇到问题不好排查，维护也很痛苦。如果能尽量少碰 DOM，以数据、逻辑导向来写 view 呢？
Github 上有 xx 步从 jQuery 到 Backbone, 就是通过一步步迭代，解释 Backbone 如何抽象分层，将数据、逻辑、事件、view 操作做分离，使得层级清晰，逻辑分明。可如果只为解决 view 层问题的话，是没必要引入过多概念和规则的，且 view 本身的问题，例如高复用性等也没有被解决。
React 带着变革前端开发的使命而来，声称专注 view 层，特点是组件式开发，有着简洁合理的 API，不错性能等优势。
说到组件式，大概包括了外部属性跟内部状态。比如电视盒子，对屏幕来说，只需要提供几种插口；内部构造对外是透明的，根据插口接入的不同，呈现截然不同的输出，屏幕也无需知道盒子内部的运作方式。实际上用 jQuery 时，大家也多多少少封装过一些『组件』，供外部使用，比如购物车 Counter，自定义播放器等，但并不会像 React 那样通通都是组件。在 React 里，组件包含 props(外部属性)跟 state(内部状态), 具体细节可以去看 React 官网。
初次对组件式思维赞叹的是评论的加载更多功能。一般用 jQuery 的话，思路是请求数据，组装 list DOM ，append 上去; 换做组件式思路呢？答案是数据驱动。评论的数据应该属于评论内部状态，那么加载更多调整内部状态就好了(不断练习这种数据导向的思维，合理设计 props 跟 state，对于通常项目需求，写起来就非常快了，同时也基本避开了对 DOM 的操作)，React 帮你把状态的更新高效的反映到 DOM 更新。</description>
    </item>
    
    <item>
      <title>用Grunt构建ReactJs开发环境</title>
      <link>https://flyfloor.github.io/posts/2015-06-19-grunt-make-react-more-sexy/</link>
      <pubDate>Fri, 19 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://flyfloor.github.io/posts/2015-06-19-grunt-make-react-more-sexy/</guid>
      <description>本文主要是讲如何使用grunt来构建react开发环境
 最近计划将性感的React投入真正应用，在开发环境上小折腾了一番，主要纠结在于前端构建工具和模块化编程方式的选择。
关于模块化编程，在此之前用过requireJs的方式来写模块，纠结的是移动端react压缩后也有100k以上大小，投入过多的库，可能导致移动端体验变差，于是决定放弃requireJs，采用CommonJs的方式来写，正好Sublime 的react插件自动补全也是这种方式。
关于构建工具，由于一直使用grunt 构建工程的，而网上使用react的，大多是用webpack来做前端工程化，对于习惯使用grunt来构建项目的开发者来说，有一定学习成本。思考再三，决定继续使用grunt。以下便是使用grunt构建react开发环境的简要介绍。
####首先，安装grunt
关于grunt的安装、使用在 adesk-webapp-template 有介绍。此处省略。
####react 开发环境
 安装grunt-react
grunt react 用来将 React&amp;rsquo;s JSX templates 编译成Javascript。
  详细使用方法: grunt react
安装：
npm install grunt-react --save-dev  在Gruntfile里添加:
grunt.loadNpmTasks(&#39;grunt-react&#39;);  src目录：
└── src ├── component // 所有JSX文件 ├── build // 通过grunt react编译后的.js文件 ...  配置:
files: { expand: true, cwd: &#39;js/component&#39;, src: [&#39;**/*.jsx&#39;], dest: &#39;js/build&#39;, ext: &#39;.js&#39; } ...   安装grunt-browserify
grunt browserify 用来将CommonJs风格的Javascript代码打包。使用这个插件将grunt react编译后的js文件打包，最终在浏览器中使用。</description>
    </item>
    
  </channel>
</rss>