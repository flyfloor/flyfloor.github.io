<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Es6 on braavos</title>
    <link>https://braavos.me/tags/es6/</link>
    <description>Recent content in Es6 on braavos</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 31 Jan 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://braavos.me/tags/es6/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>深入 ES6 - Symbols</title>
      <link>https://braavos.me/posts/2016-01-31-symbols/</link>
      <pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2016-01-31-symbols/</guid>
      <description>原文出自 ES6 in depths, 作者 Jason Orendorff, 翻译：落在深海
 ES6 In Depth 系列将详细解读 ES6 的新特性。
ES6 的 Symbol 是什么？
Symbol 并不是 logo 之类的。
你在代码里也不能用小图片(emoji 表情之类的)。
let 😻 = 😺 × 😍; // 语法错误  它们也并不是文学里的象征意义。
它们更不会是钹(乐器)。
(在代码里使用钹也并不是个好主意。他们很容易崩溃???)
所以究竟什么是 Symbol?
七种类型 1997年，JavaScript 第一次被标准化，它便拥有六种类型。ES6 出来前，JS 程序里任何数值都属于这几种分类：
 undefined null Boolean Number String Object  每种类型都是值的集合。前五种集合的值是有限的。布尔值只有 true 跟 false，不可能拥有第三个值。更多的 Number 及 String 值。标准提到有18,437,736,874,454,810,627多个不同的数字(包括 NaN, 它代表『Not a Number』)。相比起字符串，还是小巫见大巫。我认为后者有(2144,115,188,075,855,872 − 1) ÷ 65,535 多个值, 不过可能我数的是错的。</description>
    </item>
    
    <item>
      <title>深入 ES6  - 子类</title>
      <link>https://braavos.me/posts/2015-10-08-subclassing/</link>
      <pubDate>Thu, 08 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2015-10-08-subclassing/</guid>
      <description>原文出自 ES6 in depths, 作者 Eric Faust, 翻译：落在深海
 ES6 In Depth 系列将详细解读 ES6 的新特性。
两周前，我们描述了 ES6 用来操作繁琐的对象构造的新的类系统，也介绍了如何使用它写出如下的代码：
class Circle { constructor(radius) { this.radius = radius; Circle.circlesMade++; }; static draw(circle, canvas) { // Canvas drawing code  }; static get circlesMade() { return !this._count ? 0 : this._count; }; static set circlesMade(val) { this._count = val; }; area() { return Math.pow(this.radius, 2) * Math.PI; }; get radius() { return this.</description>
    </item>
    
    <item>
      <title>深入 ES6  - 其他参数及默认参数</title>
      <link>https://braavos.me/posts/2015-09-20-rest-parameters-and-defaults/</link>
      <pubDate>Sun, 20 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2015-09-20-rest-parameters-and-defaults/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;原文出自 &lt;a href=&#34;https://hacks.mozilla.org/2015/05/es6-in-depth-rest-parameters-and-defaults/&#34;&gt;ES6 in depths&lt;/a&gt;, 作者 &lt;a href=&#34;https://blog.mozilla.org/jorendorff/&#34;&gt;Jason Orendorff&lt;/a&gt;, 翻译：落在深海&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;ES6 In Depth&lt;/em&gt; 系列将详细解读 ES6 的新特性。&lt;/p&gt;

&lt;p&gt;本文主讲的两个特性：其他参数和默认参数，将使得 Javascript 更富有表达性。&lt;/p&gt;

&lt;h3 id=&#34;其他参数&#34;&gt;其他参数&lt;/h3&gt;

&lt;p&gt;在创建 API 时常会需要可变函数，该函数接受任意长度的参数。例如：String.prototype.concat 接受多个字符串参数。ES6 提供一种新的方式来传递可变参数。&lt;/p&gt;

&lt;p&gt;我们写个简单的函数 &lt;code&gt;containsAll&lt;/code&gt;，用来检查字符串是否包含一系列的子字符串。例如： containsAll(&amp;ldquo;banana&amp;rdquo;, &amp;ldquo;b&amp;rdquo;, &amp;ldquo;nan&amp;rdquo;) 会返回 true， 而 containsAll(&amp;ldquo;banana&amp;rdquo;, &amp;ldquo;c&amp;rdquo;, &amp;ldquo;nan&amp;rdquo;) 返回  false。&lt;/p&gt;

&lt;p&gt;一般我们是这样写的：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>深入 ES6  - 模块</title>
      <link>https://braavos.me/posts/2015-09-20-modules/</link>
      <pubDate>Sun, 20 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2015-09-20-modules/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;原文出自 &lt;a href=&#34;https://hacks.mozilla.org/2015/08/es6-in-depth-modules/&#34;&gt;ES6 in depths&lt;/a&gt;, 作者 &lt;a href=&#34;https://blog.mozilla.org/jorendorff/&#34;&gt;Jason Orendorff&lt;/a&gt;, 翻译：落在深海&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;ES6 In Depth&lt;/em&gt; 系列将详细解读 ES6 的新特性。&lt;/p&gt;

&lt;p&gt;当我在2007年组建 Mozilla Javascript 团队时，好笑的是当时典型的 Js 程序只有一行。&lt;/p&gt;

&lt;p&gt;两年后谷歌地图被推出，在这之前不久，Javascript 主要被用来做表单的验证，并且可以确定的是&lt;code&gt;&amp;lt;input onchange=&amp;gt;&lt;/code&gt; 仍旧只有一行。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>深入 ES6  - 模板字符串</title>
      <link>https://braavos.me/posts/2015-09-20-template-strings/</link>
      <pubDate>Sun, 20 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2015-09-20-template-strings/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;原文出自 &lt;a href=&#34;https://hacks.mozilla.org/2015/05/es6-in-depth-template-strings-2/&#34;&gt;ES6 in depths&lt;/a&gt;, 作者 &lt;a href=&#34;https://blog.mozilla.org/jorendorff/&#34;&gt;Jason Orendorff&lt;/a&gt;, 翻译：落在深海&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;ES6 In Depth&lt;/em&gt; 系列将详细解读 ES6 的新特性。&lt;/p&gt;

&lt;p&gt;上周我承诺换个节奏。继迭代器跟 generators 后，我说要换点儿简单的，不会烧糊你大脑的东西。读完这篇文章，看看我是否信守承诺。&lt;/p&gt;

&lt;p&gt;现在，先从简单的开始。&lt;/p&gt;

&lt;h3 id=&#34;的基础知识&#34;&gt;` 的基础知识&lt;/h3&gt;</description>
    </item>
    
    <item>
      <title>深入 ES6  - 箭头函数</title>
      <link>https://braavos.me/posts/2015-09-20-arrow-functions/</link>
      <pubDate>Sun, 20 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2015-09-20-arrow-functions/</guid>
      <description>原文出自 ES6 in depths, 作者 Jason Orendorff, 翻译：落在深海
 ES6 In Depth 系列将详细解读 ES6 的新特性。
箭头在 Javascript 早期便已存在。第一个 Javascript 指南建议将 Javascript 代码用内联 scripts 标签包裹，写在 HTML 注释里。这样对于不支持 Js 的浏览器，Javascript 代码就不会被认作是 text 了：
&amp;lt;script language=&amp;#34;javascript&amp;#34;&amp;gt; &amp;lt;!-- document.bgColor = &amp;#34;brown&amp;#34;; // red // --&amp;gt; &amp;lt;/script&amp;gt; 老浏览器将看到的是两个不被支持的 tag 和注释；只有支持的浏览器才能执行 Js 代码。
为了支持这项老的把戏，浏览器的 Javascript 引擎会将 &amp;lt;!-- 开头当做单行注释。这项技术一直存在于 Javascript 语言中，直到今天，不仅仅在内联的 &amp;lt;script&amp;gt; 标签里。甚至在 NodeJs 里也是如此。
因此，这样带箭头的注释方式在 ES6 里第一次被标准化。然而今天要讲的，此箭头非彼箭头。
箭头 &amp;ndash;&amp;gt; 同时表示 单行注释。诡异的是，HTML 标签里 &amp;ndash;&amp;gt; 之前的部分是注释，而在 Js 里，箭头后面的单行部分是注释。</description>
    </item>
    
    <item>
      <title>深入 ES6  - 类</title>
      <link>https://braavos.me/posts/2015-09-20-classes/</link>
      <pubDate>Sun, 20 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2015-09-20-classes/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;原文出自 &lt;a href=&#34;https://hacks.mozilla.org/2015/07/es6-in-depth-classes/&#34;&gt;ES6 in depths&lt;/a&gt;, 作者 &lt;a href=&#34;https://hacks.mozilla.org/author/efaustmozilla-com/&#34;&gt;Eric Faust&lt;/a&gt;, 翻译：落在深海&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;ES6 In Depth&lt;/em&gt; 系列将详细解读 ES6 的新特性。&lt;/p&gt;

&lt;p&gt;我们从上周文章介绍的错综复杂后得到一丝喘息的机会。今天不会有从未见过的 &lt;a href=&#34;https://hacks.mozilla.org/2015/07/es6-in-depth-generators-continued/&#34;&gt;generators 的写法&lt;/a&gt;; 没有操纵 Javascript 内部算法的 &lt;a href=&#34;https://hacks.mozilla.org/2015/07/es6-in-depth-proxies-and-reflect/&#34;&gt;强大代理对象&lt;/a&gt;；没有避免自己刀工火种的新数据结构。取代的是，我们要讨论下句法和语义上一个遗留问题： Javascript 的对象构造。&lt;/p&gt;

&lt;h3 id=&#34;问题所在&#34;&gt;问题所在&lt;/h3&gt;</description>
    </item>
    
    <item>
      <title>深入 ES6  - 解构</title>
      <link>https://braavos.me/posts/2015-09-20-destructuring/</link>
      <pubDate>Sun, 20 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2015-09-20-destructuring/</guid>
      <description>原文出自 ES6 in depths, 作者 Nick Fitzgerald, 翻译：落在深海
 ES6 In Depth 系列将详细解读 ES6 的新特性。
编者的话：本文的早期版本，作者为 firefox 开发者工具的工程师 Nick Fitzgerald，出现在 Nick 的博客 Destructuring Assignment in ES6。
什么是 Destructuring？ destructuring 赋值允许用类似数组对象迭代的语法给数组或对象的属性赋值。语法极致简洁，而且较原有属性赋值语法更清晰。
在没有 destructuring 赋值之前，这样获取数组的属性：
var first = someArray[0]; var second = someArray[1]; var third = someArray[2];  有了 destructuring 赋值，上面代码变得清晰可读：
var [first, second, third] = someArray;  SpiderMonkey(firefox 的 Javascript 引擎)早已支持大多数的 destructuring 操作，然而并不是全部支持。Track SpiderMonkey’s destructuring (and general ES6) support in bug 694100。</description>
    </item>
    
    <item>
      <title>深入 ES6  - 生成器</title>
      <link>https://braavos.me/posts/2015-09-19-generators/</link>
      <pubDate>Sat, 19 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2015-09-19-generators/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;原文出自 &lt;a href=&#34;https://hacks.mozilla.org/2015/05/es6-in-depth-generators/&#34;&gt;ES6 in depths&lt;/a&gt;, 作者 &lt;a href=&#34;https://blog.mozilla.org/jorendorff/&#34;&gt;Jason Orendorff&lt;/a&gt;, 翻译：落在深海&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;ES6 In Depth&lt;/em&gt; 系列将详细解读 ES6 的新特性。&lt;/p&gt;

&lt;p&gt;我很激动，因为今天我们要聊一聊 ES6 里最神奇的特性。&lt;/p&gt;

&lt;p&gt;怎么个神奇法?  对于初学者来说，这个概念跟以往 Js 里其他概念截然不同，以至于初次接触有些晦涩难懂。在某种意义上，它完改变了语言的行为。 如果这都不算神奇，那么？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>深入 ES6  - 简介</title>
      <link>https://braavos.me/posts/2015-09-19-es6-in-depth/</link>
      <pubDate>Sat, 19 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2015-09-19-es6-in-depth/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;原文出自 &lt;a href=&#34;https://hacks.mozilla.org/2015/04/es6-in-depth-an-introduction/&#34;&gt;ES6 in depths&lt;/a&gt;, 作者 &lt;a href=&#34;https://blog.mozilla.org/jorendorff/&#34;&gt;Jason Orendorff&lt;/a&gt;, 翻译：落在深海&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;欢迎来到 &lt;em&gt;ES6 In Depth&lt;/em&gt;! 这个周系列，我们一起将探索 JavaScript 即将推出的新版本：ECMAScript 6。 ES6 富含许多新特性，将让 JS 变得更加强大，富有表现力，我们将在接下来几周内一一研究。在深入细节之前，有必要谈谈什么是ES6，使用它你会得到什么。&lt;/p&gt;

&lt;h3 id=&#34;ecmascript-的局限&#34;&gt;ECMAScript 的局限&lt;/h3&gt;</description>
    </item>
    
    <item>
      <title>深入 ES6  - 迭代器和 for-of 循环  </title>
      <link>https://braavos.me/posts/2015-09-19-iterators-and-the-for-of-loop/</link>
      <pubDate>Sat, 19 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2015-09-19-iterators-and-the-for-of-loop/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;原文出自 &lt;a href=&#34;https://hacks.mozilla.org/2015/04/es6-in-depth-iterators-and-the-for-of-loop/&#34;&gt;ES6 in depths&lt;/a&gt;, 作者 &lt;a href=&#34;https://blog.mozilla.org/jorendorff/&#34;&gt;Jason Orendorff&lt;/a&gt;, 翻译：落在深海&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;ES6 In Depth&lt;/em&gt; 系列将详细解读 ES6 的新特性。&lt;/p&gt;

&lt;p&gt;怎么循环一个数组的元素呢？20年前，Js 代码是这么写的:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;index&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;index&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;myArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;myArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从 ES5 起，你可以这样写：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;myArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>