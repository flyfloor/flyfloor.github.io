<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech on braavos</title>
    <link>https://braavos.me/tags/tech/</link>
    <description>Recent content in Tech on braavos</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 04 Dec 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://braavos.me/tags/tech/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Reason? Reason!</title>
      <link>https://braavos.me/posts/2017-12-04-reason/</link>
      <pubDate>Mon, 04 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2017-12-04-reason/</guid>
      <description>今天学习一门新语言：Reason，其实去年的时候就有了解过这门语言，当时看文档一头雾水，就放弃了。几周前看了看官网，发现变化很大，新版语法感觉还不错，就简单过了下。
首先，Reason 严格来说称不上一个语言，它是基于 OCaml 新语法的 DSL。OCaml 是一门函数式编程语言，它本身有些很好的特性，例如拥有严格静态类型，灵活强大的对象和模块系统，适合写高性能、结构复杂、数据正确性高要求的应用等。多被用来写编译器、程序分析、金融交易、虚拟机等应用。我们熟知的 facebook 的 flow 也是基于 OCaml 编写的。
那么问题是『写前端 JavaScript 不够吗？老夫一把梭，就是干！』JavaScript 编写的代码已经运行在各种平台，侵入更多的领域，然而应用的规模变大以后，稳定性、可维护性变差很多，更多运行时异常，让测试、维护都变得非常难。
为了解决这些问题，Reason 的作者基于 OCaml 设计了 Reason 这门语言，他拥有以下主要特点：
  坚若磐石的类型系统
得益于 OCaml 100% 的类型覆盖率，同时享受一旦编译，数据的类型则精准无误。
 极致的简洁、实用主义
允许可变、副作用以及对象让从 JS 程序员更自然，同时保持语言本身的纯净、不可变及函数式。
 聚焦高性能和语言的大小
Reason 的构建系统：bsb，能够保证增量构建在 100 ms 内完成，同时构建出的文件非常小。
 基于现有语言的优秀特点，强大兼容扩展性
完全的类型检查，同时支持 JS 片段完美的混合执行。
 强大的生态及工具链
基于不同的编辑器，提供了插件及语法支持，同时支持引用外部 JS 模块，这样就可以使用成千上万的 NPM 包了。   听起来非常美好，关于为什么使用 OCaml 语法作为 Reason 背后的支撑，而不是其他语言？ 很多语言能够实现上面提到的特性，然而主要还是看中：
  OCaml 能够非常高效率转换成底层机器代码的能力
 OCaml 默认拥有不可变、函数式的特性，同时可以通过一些方式支持副作用的、可变以及其他特性，方便应用中的一些特殊场景</description>
    </item>
    
    <item>
      <title>How about a nice cup of React</title>
      <link>https://braavos.me/posts/2016-07-05-how-about-a-nice-cup-of-react/</link>
      <pubDate>Tue, 05 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2016-07-05-how-about-a-nice-cup-of-react/</guid>
      <description>接触 React 一年左右，期间在单页面、单页应用都有使用， 它极大地改变了我个人的前端开发方式。为方便快速出产品，闲暇之余也尝试写了点基础组件: react-component, react-image-cropper，react-touch-gallery, react-file-upload。也一直计划着写点心得总结什么的，迫于忙、浮躁，难静下心写东西，屡次作罢。这两天刚离职，决定把这篇总结补上。
在 React 之前，玩过一点点 Angular 跟 Backbone，Backbone 是比较轻量级 MVC，Angular 较重，它的指令、注入式写法, 较死板的规则，不够简洁的 API，诸多概念等等，最终只是被我当玩具折腾了下。由于接触到项目多数时间花在 view 的交互、事件、变化更新上，所以大多数情况还是选择熟悉的 jQuery，原因无非是：熟练，可控，最轻依赖，快速灵活。过程基本上是: 命名 DOM，给 DOM 加特效，取数据更新 DOM， 绑定事件到 DOM 等等。时间一久，问题就很明显了：即使多次尝试做不同层次的抽象分层，还是很乱，太频繁与 DOM 打交道，遇到问题不好排查，维护也很痛苦。如果能尽量少碰 DOM，以数据、逻辑导向来写 view 呢？
Github 上有 xx 步从 jQuery 到 Backbone, 就是通过一步步迭代，解释 Backbone 如何抽象分层，将数据、逻辑、事件、view 操作做分离，使得层级清晰，逻辑分明。可如果只为解决 view 层问题的话，是没必要引入过多概念和规则的，且 view 本身的问题，例如高复用性等也没有被解决。
React 带着变革前端开发的使命而来，声称专注 view 层，特点是组件式开发，有着简洁合理的 API，不错性能等优势。
说到组件式，大概包括了外部属性跟内部状态。比如电视盒子，对屏幕来说，只需要提供几种插口；内部构造对外是透明的，根据插口接入的不同，呈现截然不同的输出，屏幕也无需知道盒子内部的运作方式。实际上用 jQuery 时，大家也多多少少封装过一些『组件』，供外部使用，比如购物车 Counter，自定义播放器等，但并不会像 React 那样通通都是组件。在 React 里，组件包含 props(外部属性)跟 state(内部状态), 具体细节可以去看 React 官网。
初次对组件式思维赞叹的是评论的加载更多功能。一般用 jQuery 的话，思路是请求数据，组装 list DOM ，append 上去; 换做组件式思路呢？答案是数据驱动。评论的数据应该属于评论内部状态，那么加载更多调整内部状态就好了(不断练习这种数据导向的思维，合理设计 props 跟 state，对于通常项目需求，写起来就非常快了，同时也基本避开了对 DOM 的操作)，React 帮你把状态的更新高效的反映到 DOM 更新。</description>
    </item>
    
    <item>
      <title>固定尺寸的响应式图片占位符</title>
      <link>https://braavos.me/posts/2016-01-31-responsive-image-placeholder/</link>
      <pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2016-01-31-responsive-image-placeholder/</guid>
      <description>&lt;p&gt;对于图片列表，通常会使用懒加载的方式，好处就不多说了。通常实现是图片的 src 放一张占位符, data- 属性是原图地址，监听 滚动及触摸事件，如果在 viewport 内，加载原图。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>深入 ES6 - Symbols</title>
      <link>https://braavos.me/posts/2016-01-31-symbols/</link>
      <pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2016-01-31-symbols/</guid>
      <description>原文出自 ES6 in depths, 作者 Jason Orendorff, 翻译：落在深海
 ES6 In Depth 系列将详细解读 ES6 的新特性。
ES6 的 Symbol 是什么？
Symbol 并不是 logo 之类的。
你在代码里也不能用小图片(emoji 表情之类的)。
let 😻 = 😺 × 😍; // 语法错误  它们也并不是文学里的象征意义。
它们更不会是钹(乐器)。
(在代码里使用钹也并不是个好主意。他们很容易崩溃???)
所以究竟什么是 Symbol?
七种类型 1997年，JavaScript 第一次被标准化，它便拥有六种类型。ES6 出来前，JS 程序里任何数值都属于这几种分类：
 undefined null Boolean Number String Object  每种类型都是值的集合。前五种集合的值是有限的。布尔值只有 true 跟 false，不可能拥有第三个值。更多的 Number 及 String 值。标准提到有18,437,736,874,454,810,627多个不同的数字(包括 NaN, 它代表『Not a Number』)。相比起字符串，还是小巫见大巫。我认为后者有(2144,115,188,075,855,872 − 1) ÷ 65,535 多个值, 不过可能我数的是错的。</description>
    </item>
    
    <item>
      <title>深入 ES6  - 子类</title>
      <link>https://braavos.me/posts/2015-10-08-subclassing/</link>
      <pubDate>Thu, 08 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2015-10-08-subclassing/</guid>
      <description>原文出自 ES6 in depths, 作者 Eric Faust, 翻译：落在深海
 ES6 In Depth 系列将详细解读 ES6 的新特性。
两周前，我们描述了 ES6 用来操作繁琐的对象构造的新的类系统，也介绍了如何使用它写出如下的代码：
class Circle { constructor(radius) { this.radius = radius; Circle.circlesMade++; }; static draw(circle, canvas) { // Canvas drawing code  }; static get circlesMade() { return !this._count ? 0 : this._count; }; static set circlesMade(val) { this._count = val; }; area() { return Math.pow(this.radius, 2) * Math.PI; }; get radius() { return this.</description>
    </item>
    
    <item>
      <title>一个好玩的 terminal 插件</title>
      <link>https://braavos.me/posts/2015-10-04-the-fuck/</link>
      <pubDate>Sun, 04 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2015-10-04-the-fuck/</guid>
      <description>&lt;p&gt;推荐一个好玩的终端插件，名字叫：thefuck。回想下每次把 &lt;code&gt;git status&lt;/code&gt; 写成 &lt;code&gt;git stats&lt;/code&gt;, &lt;code&gt;git branch&lt;/code&gt; 写成 &lt;code&gt;git brunch&lt;/code&gt; 的懊恼，虽然每次重新输入并不会花费太多时间，然而输错的瞬间你可能最容易脱口而出的就是 “fuck” 了。那么当输入有误时，假如你能任性的敲入 &lt;code&gt;fuck&lt;/code&gt;，终端乖乖替你完成正确的输入，是不是很解气？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>深入 ES6  - 其他参数及默认参数</title>
      <link>https://braavos.me/posts/2015-09-20-rest-parameters-and-defaults/</link>
      <pubDate>Sun, 20 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2015-09-20-rest-parameters-and-defaults/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;原文出自 &lt;a href=&#34;https://hacks.mozilla.org/2015/05/es6-in-depth-rest-parameters-and-defaults/&#34;&gt;ES6 in depths&lt;/a&gt;, 作者 &lt;a href=&#34;https://blog.mozilla.org/jorendorff/&#34;&gt;Jason Orendorff&lt;/a&gt;, 翻译：落在深海&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;ES6 In Depth&lt;/em&gt; 系列将详细解读 ES6 的新特性。&lt;/p&gt;

&lt;p&gt;本文主讲的两个特性：其他参数和默认参数，将使得 Javascript 更富有表达性。&lt;/p&gt;

&lt;h3 id=&#34;其他参数&#34;&gt;其他参数&lt;/h3&gt;

&lt;p&gt;在创建 API 时常会需要可变函数，该函数接受任意长度的参数。例如：String.prototype.concat 接受多个字符串参数。ES6 提供一种新的方式来传递可变参数。&lt;/p&gt;

&lt;p&gt;我们写个简单的函数 &lt;code&gt;containsAll&lt;/code&gt;，用来检查字符串是否包含一系列的子字符串。例如： containsAll(&amp;ldquo;banana&amp;rdquo;, &amp;ldquo;b&amp;rdquo;, &amp;ldquo;nan&amp;rdquo;) 会返回 true， 而 containsAll(&amp;ldquo;banana&amp;rdquo;, &amp;ldquo;c&amp;rdquo;, &amp;ldquo;nan&amp;rdquo;) 返回  false。&lt;/p&gt;

&lt;p&gt;一般我们是这样写的：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>深入 ES6  - 模块</title>
      <link>https://braavos.me/posts/2015-09-20-modules/</link>
      <pubDate>Sun, 20 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2015-09-20-modules/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;原文出自 &lt;a href=&#34;https://hacks.mozilla.org/2015/08/es6-in-depth-modules/&#34;&gt;ES6 in depths&lt;/a&gt;, 作者 &lt;a href=&#34;https://blog.mozilla.org/jorendorff/&#34;&gt;Jason Orendorff&lt;/a&gt;, 翻译：落在深海&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;ES6 In Depth&lt;/em&gt; 系列将详细解读 ES6 的新特性。&lt;/p&gt;

&lt;p&gt;当我在2007年组建 Mozilla Javascript 团队时，好笑的是当时典型的 Js 程序只有一行。&lt;/p&gt;

&lt;p&gt;两年后谷歌地图被推出，在这之前不久，Javascript 主要被用来做表单的验证，并且可以确定的是&lt;code&gt;&amp;lt;input onchange=&amp;gt;&lt;/code&gt; 仍旧只有一行。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>深入 ES6  - 模板字符串</title>
      <link>https://braavos.me/posts/2015-09-20-template-strings/</link>
      <pubDate>Sun, 20 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2015-09-20-template-strings/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;原文出自 &lt;a href=&#34;https://hacks.mozilla.org/2015/05/es6-in-depth-template-strings-2/&#34;&gt;ES6 in depths&lt;/a&gt;, 作者 &lt;a href=&#34;https://blog.mozilla.org/jorendorff/&#34;&gt;Jason Orendorff&lt;/a&gt;, 翻译：落在深海&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;ES6 In Depth&lt;/em&gt; 系列将详细解读 ES6 的新特性。&lt;/p&gt;

&lt;p&gt;上周我承诺换个节奏。继迭代器跟 generators 后，我说要换点儿简单的，不会烧糊你大脑的东西。读完这篇文章，看看我是否信守承诺。&lt;/p&gt;

&lt;p&gt;现在，先从简单的开始。&lt;/p&gt;

&lt;h3 id=&#34;的基础知识&#34;&gt;` 的基础知识&lt;/h3&gt;</description>
    </item>
    
    <item>
      <title>深入 ES6  - 箭头函数</title>
      <link>https://braavos.me/posts/2015-09-20-arrow-functions/</link>
      <pubDate>Sun, 20 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2015-09-20-arrow-functions/</guid>
      <description>原文出自 ES6 in depths, 作者 Jason Orendorff, 翻译：落在深海
 ES6 In Depth 系列将详细解读 ES6 的新特性。
箭头在 Javascript 早期便已存在。第一个 Javascript 指南建议将 Javascript 代码用内联 scripts 标签包裹，写在 HTML 注释里。这样对于不支持 Js 的浏览器，Javascript 代码就不会被认作是 text 了：
&amp;lt;script language=&amp;#34;javascript&amp;#34;&amp;gt; &amp;lt;!-- document.bgColor = &amp;#34;brown&amp;#34;; // red // --&amp;gt; &amp;lt;/script&amp;gt; 老浏览器将看到的是两个不被支持的 tag 和注释；只有支持的浏览器才能执行 Js 代码。
为了支持这项老的把戏，浏览器的 Javascript 引擎会将 &amp;lt;!-- 开头当做单行注释。这项技术一直存在于 Javascript 语言中，直到今天，不仅仅在内联的 &amp;lt;script&amp;gt; 标签里。甚至在 NodeJs 里也是如此。
因此，这样带箭头的注释方式在 ES6 里第一次被标准化。然而今天要讲的，此箭头非彼箭头。
箭头 &amp;ndash;&amp;gt; 同时表示 单行注释。诡异的是，HTML 标签里 &amp;ndash;&amp;gt; 之前的部分是注释，而在 Js 里，箭头后面的单行部分是注释。</description>
    </item>
    
    <item>
      <title>深入 ES6  - 类</title>
      <link>https://braavos.me/posts/2015-09-20-classes/</link>
      <pubDate>Sun, 20 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2015-09-20-classes/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;原文出自 &lt;a href=&#34;https://hacks.mozilla.org/2015/07/es6-in-depth-classes/&#34;&gt;ES6 in depths&lt;/a&gt;, 作者 &lt;a href=&#34;https://hacks.mozilla.org/author/efaustmozilla-com/&#34;&gt;Eric Faust&lt;/a&gt;, 翻译：落在深海&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;ES6 In Depth&lt;/em&gt; 系列将详细解读 ES6 的新特性。&lt;/p&gt;

&lt;p&gt;我们从上周文章介绍的错综复杂后得到一丝喘息的机会。今天不会有从未见过的 &lt;a href=&#34;https://hacks.mozilla.org/2015/07/es6-in-depth-generators-continued/&#34;&gt;generators 的写法&lt;/a&gt;; 没有操纵 Javascript 内部算法的 &lt;a href=&#34;https://hacks.mozilla.org/2015/07/es6-in-depth-proxies-and-reflect/&#34;&gt;强大代理对象&lt;/a&gt;；没有避免自己刀工火种的新数据结构。取代的是，我们要讨论下句法和语义上一个遗留问题： Javascript 的对象构造。&lt;/p&gt;

&lt;h3 id=&#34;问题所在&#34;&gt;问题所在&lt;/h3&gt;</description>
    </item>
    
    <item>
      <title>深入 ES6  - 解构</title>
      <link>https://braavos.me/posts/2015-09-20-destructuring/</link>
      <pubDate>Sun, 20 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2015-09-20-destructuring/</guid>
      <description>原文出自 ES6 in depths, 作者 Nick Fitzgerald, 翻译：落在深海
 ES6 In Depth 系列将详细解读 ES6 的新特性。
编者的话：本文的早期版本，作者为 firefox 开发者工具的工程师 Nick Fitzgerald，出现在 Nick 的博客 Destructuring Assignment in ES6。
什么是 Destructuring？ destructuring 赋值允许用类似数组对象迭代的语法给数组或对象的属性赋值。语法极致简洁，而且较原有属性赋值语法更清晰。
在没有 destructuring 赋值之前，这样获取数组的属性：
var first = someArray[0]; var second = someArray[1]; var third = someArray[2];  有了 destructuring 赋值，上面代码变得清晰可读：
var [first, second, third] = someArray;  SpiderMonkey(firefox 的 Javascript 引擎)早已支持大多数的 destructuring 操作，然而并不是全部支持。Track SpiderMonkey’s destructuring (and general ES6) support in bug 694100。</description>
    </item>
    
    <item>
      <title>深入 ES6  - 生成器</title>
      <link>https://braavos.me/posts/2015-09-19-generators/</link>
      <pubDate>Sat, 19 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2015-09-19-generators/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;原文出自 &lt;a href=&#34;https://hacks.mozilla.org/2015/05/es6-in-depth-generators/&#34;&gt;ES6 in depths&lt;/a&gt;, 作者 &lt;a href=&#34;https://blog.mozilla.org/jorendorff/&#34;&gt;Jason Orendorff&lt;/a&gt;, 翻译：落在深海&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;ES6 In Depth&lt;/em&gt; 系列将详细解读 ES6 的新特性。&lt;/p&gt;

&lt;p&gt;我很激动，因为今天我们要聊一聊 ES6 里最神奇的特性。&lt;/p&gt;

&lt;p&gt;怎么个神奇法?  对于初学者来说，这个概念跟以往 Js 里其他概念截然不同，以至于初次接触有些晦涩难懂。在某种意义上，它完改变了语言的行为。 如果这都不算神奇，那么？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>深入 ES6  - 简介</title>
      <link>https://braavos.me/posts/2015-09-19-es6-in-depth/</link>
      <pubDate>Sat, 19 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2015-09-19-es6-in-depth/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;原文出自 &lt;a href=&#34;https://hacks.mozilla.org/2015/04/es6-in-depth-an-introduction/&#34;&gt;ES6 in depths&lt;/a&gt;, 作者 &lt;a href=&#34;https://blog.mozilla.org/jorendorff/&#34;&gt;Jason Orendorff&lt;/a&gt;, 翻译：落在深海&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;欢迎来到 &lt;em&gt;ES6 In Depth&lt;/em&gt;! 这个周系列，我们一起将探索 JavaScript 即将推出的新版本：ECMAScript 6。 ES6 富含许多新特性，将让 JS 变得更加强大，富有表现力，我们将在接下来几周内一一研究。在深入细节之前，有必要谈谈什么是ES6，使用它你会得到什么。&lt;/p&gt;

&lt;h3 id=&#34;ecmascript-的局限&#34;&gt;ECMAScript 的局限&lt;/h3&gt;</description>
    </item>
    
    <item>
      <title>深入 ES6  - 迭代器和 for-of 循环  </title>
      <link>https://braavos.me/posts/2015-09-19-iterators-and-the-for-of-loop/</link>
      <pubDate>Sat, 19 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2015-09-19-iterators-and-the-for-of-loop/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;原文出自 &lt;a href=&#34;https://hacks.mozilla.org/2015/04/es6-in-depth-iterators-and-the-for-of-loop/&#34;&gt;ES6 in depths&lt;/a&gt;, 作者 &lt;a href=&#34;https://blog.mozilla.org/jorendorff/&#34;&gt;Jason Orendorff&lt;/a&gt;, 翻译：落在深海&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;ES6 In Depth&lt;/em&gt; 系列将详细解读 ES6 的新特性。&lt;/p&gt;

&lt;p&gt;怎么循环一个数组的元素呢？20年前，Js 代码是这么写的:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;index&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;index&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;myArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;myArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从 ES5 起，你可以这样写：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;myArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>道高一尺，墙高一丈：互联网封锁是如何升级的</title>
      <link>https://braavos.me/posts/2015-09-08-fuck-gfw/</link>
      <pubDate>Tue, 08 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2015-09-08-fuck-gfw/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;原文来自&lt;a href=&#34;https://theinitium.com/article/20150904-mainland-greatfirewall/&#34;&gt;端傳媒&lt;/a&gt;, 作者：特约撰稿人 VV，经端傳媒編輯部许可，转载以便收藏&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;新时代的防火墙像手术刀，精准迅速，直击命门。而“翻墙”未来可能变成一门手艺，如何传承，任重道远。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;1987年，中国第一封电子邮件由中国兵器工业计算机应用研究所发往德国，标志中国成功接入互联网。邮件内容是：“Across the Great Wall we can reach every corner in the world”——穿越“巨墙”（长城），我们无处不及。与这封邮件几乎同龄的我，没想到生活中竟总离不开“墙”。在物理世界和虚拟世界中多次穿墙，也去过世界各处，看“墙”越筑越高，有时义愤填膺，有时啼笑皆非。仅以此文，记录“墙”边的一些见闻。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Getting Dicey With Flexbox</title>
      <link>https://braavos.me/posts/2015-07-22-flex-layout/</link>
      <pubDate>Wed, 22 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2015-07-22-flex-layout/</guid>
      <description>此文来自Getting Dicey With Flexbox, 原文作者: Landon Schropp
 What if you could build complex CSS layouts in minutes? Flexbox is a new CSS layout spec that makes it easy to construct dynamic layouts. With flexbox, vertical centering, same-height columns, reordering, and direction agnosticism are a piece of cake.
There&amp;rsquo;s a popular myth floating around that flexbox isn&amp;rsquo;t ready for prime time. Wrong! **93% of people are now running a browser that supports flexbox.</description>
    </item>
    
    <item>
      <title>用Grunt构建ReactJs开发环境</title>
      <link>https://braavos.me/posts/2015-06-19-grunt-make-react-more-sexy/</link>
      <pubDate>Fri, 19 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2015-06-19-grunt-make-react-more-sexy/</guid>
      <description>本文主要是讲如何使用grunt来构建react开发环境
 最近计划将性感的React投入真正应用，在开发环境上小折腾了一番，主要纠结在于前端构建工具和模块化编程方式的选择。
关于模块化编程，在此之前用过requireJs的方式来写模块，纠结的是移动端react压缩后也有100k以上大小，投入过多的库，可能导致移动端体验变差，于是决定放弃requireJs，采用CommonJs的方式来写，正好Sublime 的react插件自动补全也是这种方式。
关于构建工具，由于一直使用grunt 构建工程的，而网上使用react的，大多是用webpack来做前端工程化，对于习惯使用grunt来构建项目的开发者来说，有一定学习成本。思考再三，决定继续使用grunt。以下便是使用grunt构建react开发环境的简要介绍。
####首先，安装grunt
关于grunt的安装、使用在 adesk-webapp-template 有介绍。此处省略。
####react 开发环境
 安装grunt-react
grunt react 用来将 React&amp;rsquo;s JSX templates 编译成Javascript。
  详细使用方法: grunt react
安装：
npm install grunt-react --save-dev  在Gruntfile里添加:
grunt.loadNpmTasks(&#39;grunt-react&#39;);  src目录：
└── src ├── component // 所有JSX文件 ├── build // 通过grunt react编译后的.js文件 ...  配置:
files: { expand: true, cwd: &#39;js/component&#39;, src: [&#39;**/*.jsx&#39;], dest: &#39;js/build&#39;, ext: &#39;.js&#39; } ...   安装grunt-browserify
grunt browserify 用来将CommonJs风格的Javascript代码打包。使用这个插件将grunt react编译后的js文件打包，最终在浏览器中使用。</description>
    </item>
    
    <item>
      <title>Git Rebase</title>
      <link>https://braavos.me/posts/2014-11-17-git-rebase/</link>
      <pubDate>Mon, 17 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2014-11-17-git-rebase/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;关于git rebase的简述，转自&lt;a href=&#34;//gitbook.liuhui998.com/index.html&#34; target=&#34;_blank&#34;&gt;Git Community Book 中文版&lt;/a&gt;的&lt;a href=&#34;//gitbook.liuhui998.com/4_2.html&#34; target=&#34;_blank&#34;&gt;rebase&lt;/a&gt;， 作者&lt;a href=&#34;//www.liuhui998.com&#34; target=&#34;_blank&#34;&gt;liuhui998&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;rebase&#34;&gt;rebase&lt;/h3&gt;

&lt;p&gt;假设你现在基于远程分支&amp;rdquo;origin&amp;rdquo;，创建一个叫&amp;rdquo;mywork&amp;rdquo;的分支。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git checkout -b mywork origin
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>简明 Vim 练级攻略</title>
      <link>https://braavos.me/posts/2014-08-29-basic-skills-of-vim/</link>
      <pubDate>Fri, 29 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2014-08-29-basic-skills-of-vim/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;转自：&lt;a target=&#34;_blank&#34; href=&#34;//coolshell.cn/&#34;&gt;酷 壳 – CoolShell.cn&lt;/a&gt;  原文地址：&lt;a href=&#34;//coolshell.cn/articles/5426.html&#34; target=&#34;_blank&#34;&gt;简明Vim练级攻略&lt;/a&gt; 原文作者：&lt;a target=&#34;_blank&#34; href=&#34;//coolshell.cn/articles/author/haoel&#34;&gt;陈浩&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这篇转自&lt;strong&gt;左耳朵耗子&lt;/strong&gt;的酷壳，介绍vim的基础命令，作为Vim的备忘摘录至此。&lt;/p&gt;

&lt;h2 id=&#34;正文&#34;&gt;正文&lt;/h2&gt;

&lt;p&gt;vim的学习曲线相当的大（参看&lt;a title=&#34;主流文本编辑器学习曲线&#34; href=&#34;//coolshell.cn/articles/3125.html&#34; target=&#34;_blank&#34;&gt;各种文本编辑器的学习曲线&lt;/a&gt;），所以，如果你一开始看到的是一大堆VIM的命令分类，你一定会对这个编辑器失去兴趣的。下面的文章翻译自《&lt;a href=&#34;//yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/&#34; target=&#34;_blank&#34;&gt;Learn Vim Progressively&lt;/a&gt;》，我觉得这是给新手最好的VIM的升级教程了，没有列举所有的命令，只是列举了那些最有用的命令。非常不错。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>命名函数表达式探秘</title>
      <link>https://braavos.me/posts/2014-08-12-named-function-expressions-demystified/</link>
      <pubDate>Tue, 12 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2014-08-12-named-function-expressions-demystified/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;作者：Juriy &amp;ldquo;kangax&amp;rdquo; Zaytsev  译者：为之漫笔 译文原文：&lt;a target=&#34;_blank&#34; href=&#34;//www.cn-cuckoo.com/main/wp-content/uploads/2009/12/named-function-expressions-demystified.html&#34;&gt;命名函数表达式探秘&lt;/a&gt; 。&lt;br /&gt;
关于Javascript的经典译文，由李松峰老师翻译。曾帮助我更好地理解Javascript基础。值得收藏。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;目录&#34;&gt;目录：&lt;/h3&gt;</description>
    </item>
    
    <item>
      <title>Rails的环境变量</title>
      <link>https://braavos.me/posts/2014-08-05-rails-env/</link>
      <pubDate>Tue, 05 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2014-08-05-rails-env/</guid>
      <description>&lt;p&gt;翻看我的Pocket list，发现一篇很老的讲Rails基础的文章，作者写得很口水，原文在这里：&lt;a target=&#34;_blank&#34; href=&#34;//railsapps.github.io/rails-environment-variables.html&#34;&gt;Rails Environment Variables&lt;/a&gt;, 直译如下，希望对Rails新手有所帮助：&lt;/p&gt;

&lt;h2 id=&#34;正文&#34;&gt;正文：&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;设置Rails环境变量。在Rails app中使用环境变量。Rails配置、安全与环境变量。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;环境变量&#34;&gt;环境变量&lt;/h3&gt;

&lt;p&gt;许多应用程序需要配置如电子邮件、账户凭证或外部服务的API密钥。你可以通过本地配置来让应用程序使用这些环境变量，而操作系统(Linux、Mac OS X、Windows)提供一些机制来设置本地环境变量, Heroku和其他部署平台一样也有。这里我会展示如何设置本地Unix shell环境变量。其次也会介绍两种另类的方式而不通过Unix shell在应用程序中设置环境变量。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AngularJs指令(Directive)初探</title>
      <link>https://braavos.me/posts/2014-07-30-start-from-directive/</link>
      <pubDate>Wed, 30 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2014-07-30-start-from-directive/</guid>
      <description>完成一个简单的directive，初探angular
 关于angular，大多的概念都很好理解，很快就能上手。当疑惑如何嵌入模板片段时，发现需要用directive(指令)，这部分相对难啃，下面只是个非常简单的例子，大致介绍如何使用指令。
main.html &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt; &amp;lt;script src=&amp;#34;angular.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 然后创建输入框，作为email的receiver输入 &amp;lt;input id=&amp;#34;email_to&amp;#34; type=&amp;#34;email&amp;#34; ng-model=&amp;#34;to&amp;#34;/&amp;gt; 这里有个modelto， 用来获取input输入，会被双向绑定到指令内部的scope上，后面再讲如何做。
创建模块和第一个指令 module:
var app = angular.module(&amp;#39;app&amp;#39;, []);  directive:
app.directive(&amp;#39;myDir&amp;#39;, function() { return { restrict: &amp;#39;A&amp;#39;, require: &amp;#39;^mailTo&amp;#39;, scope:{ mailTo: &amp;#39;=&amp;#39;, onSend: &amp;#39;&amp;amp;&amp;#39;, mailObj: &amp;#39;=&amp;#39;, fromName: &amp;#39;@&amp;#39; }, templateUrl: &amp;#39;template.html&amp;#39; } });   restrict 该指令如何被使用：  &amp;#39;A&amp;#39; - &amp;lt;span ng-sparkline&amp;gt;&amp;lt;/span&amp;gt; &amp;#39;E&amp;#39; - &amp;lt;ng-sparkline&amp;gt;&amp;lt;/ng-sparkline&amp;gt; &amp;#39;C&amp;#39; - &amp;lt;span class=&amp;#34;ng-sparkline&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;#39;M&amp;#39; - &amp;lt;!</description>
    </item>
    
    <item>
      <title>一个有意思的播客</title>
      <link>https://braavos.me/posts/2014-07-22-recomended-a-podcast/</link>
      <pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://braavos.me/posts/2014-07-22-recomended-a-podcast/</guid>
      <description>&lt;h3 id=&#34;关于it公论&#34;&gt;关于IT公论：&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;「IT 公论」是由李如一、李楠和 Rio 创办的科技类播客 (podcast) 节目,我们有乾货，更有湿货。我们也不只讲科技。（如今什么跟科技无关呢？「软件蚕食世界」，嗯。）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a class=&#34;no-dec&#34; href=&#34;//www.itgonglun.com&#34;  target=&#34;_blank&#34;&gt;
    &lt;img class=&#34;cover&#34; src=&#34;https://braavos.me/images/posts/itgonglun.png&#34; style=&#34;width:150px&#34;&gt;
&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>